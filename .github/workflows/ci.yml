# GitHub workflow files do not support YAML anchors.
name: CI
on:
  push:
    branches: [master]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  ##################
  ### Linux jobs ###
  ##################
  check-all:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1.4.0
      - run: cargo check --all-targets
      - run: cargo fmt --all --check
      - run: cargo clippy --all-features -- -D warnings

  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Set grcov version
        run: echo "GRCOV_VERSION=$(cargo search --limit 1 grcov | head -n1 | cut -d '"' -f2)" >> $GITHUB_ENV
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          key: ${{ env.GRCOV_VERSION }}
      - run: cargo install --version $GRCOV_VERSION grcov
      - name: Clean coverage
        run: |
          rm -f target/debug/deps/*.gcda
          rm -f target/debug/deps/*.gcno
      - run: cargo test --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: |
            -Zprofile -Zpanic_abort_tests -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort
      - uses: actions-rs/grcov@v0.1
      - uses: codecov/codecov-action@v3
        with:
          file: ./lcov.info

  cargo-sort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1.4.0
      - run: cargo install cargo-sort
      - run: cargo-sort --check

  linux_install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup dotenv-linter
        run: |
          mkdir -p $HOME/bin
          sh "${GITHUB_WORKSPACE}/install.sh" -b $HOME/bin
      - name: Verify successful installation
        run: $HOME/bin/dotenv-linter -v

  ####################
  ### Windows jobs ###
  ####################
  windows_test:
    runs-on: windows-latest
    steps:
      - name: Disable EOL conversion
        run: git config --global core.autocrlf false
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1.4.0
      - run: cargo test --all-features --no-fail-fast

  windows_install:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup dotenv-linter
        shell: bash # it uses Git Bash, i.e. MinGW
        run: |
          mkdir -p $HOME/bin
          sh "${GITHUB_WORKSPACE}/install.sh" -b $HOME/bin
      - name: Verify successful installation
        shell: bash
        run: $HOME/bin/dotenv-linter.exe -v

  ##################
  ### macOS jobs ###
  ##################
  macos_install:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup dotenv-linter
        run: |
          mkdir -p $HOME/bin
          sh "${GITHUB_WORKSPACE}/install.sh" -b $HOME/bin
      - name: Verify successful installation
        run: $HOME/bin/dotenv-linter -v

  ###################
  ### Docker jobs ###
  ###################
  docker_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: docker build --target builder .

  ####################
  ### Check builds ###
  ####################
  builds:
    name: Build
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        build:
          - x86_64-linux-gnu
          - x86_64-linux-musl
          - aarch64-linux-gnu
          - aarch64-linux-musl
          - x86_64-darwin
          - aarch64-darwin
          - x86_64-windows-msvc
          - aarch64-windows-msvc
        include:
          # Linux
          - BUILD: x86_64-linux-gnu
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: x86_64-unknown-linux-gnu
            BUILD_OPTIONS: ''
          - BUILD: x86_64-linux-musl
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: x86_64-unknown-linux-musl
            BUILD_OPTIONS: ''
          - BUILD: aarch64-linux-gnu
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: aarch64-unknown-linux-gnu
            BUILD_OPTIONS: ''
          - BUILD: aarch64-linux-musl
            OS: ubuntu-latest
            TOOLCHAIN: stable
            TARGET: aarch64-unknown-linux-musl
            BUILD_OPTIONS: '--no-default-features'
          # macOS
          - BUILD: x86_64-darwin
            OS: macos-11
            TOOLCHAIN: stable
            TARGET: x86_64-apple-darwin
            BUILD_OPTIONS: ''
          - BUILD: aarch64-darwin
            OS: macos-11
            TOOLCHAIN: stable
            TARGET: aarch64-apple-darwin
            BUILD_OPTIONS: ''
          # Windows
          - BUILD: x86_64-windows-msvc
            OS: windows-latest
            TOOLCHAIN: stable
            TARGET: x86_64-pc-windows-msvc
            BUILD_OPTIONS: ''
          - BUILD: aarch64-windows-msvc
            OS: windows-latest
            TOOLCHAIN: stable
            TARGET: aarch64-pc-windows-msvc
            BUILD_OPTIONS: '--no-default-features'
    steps:
      - uses: actions/checkout@v3
      - name: Install musl-tools
        if: matrix.TARGET == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get install -y --no-install-recommends musl-tools
      - name: Install aarch64 gnu linker
        if: matrix.TARGET == 'aarch64-unknown-linux-gnu' || matrix.TARGET == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      - uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: ${{ matrix.TOOLCHAIN }}
          target: ${{ matrix.TARGET }}
          override: true
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          key: ${{ matrix.TARGET }}
      - name: Build
        run: |
          rustup target add ${{ matrix.TARGET }}
          cargo build --release --target ${{ matrix.TARGET }} ${{ matrix.BUILD_OPTIONS }}
